rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection Rules
    match /users/{userId} {
      // Allow authenticated users to read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow creation of new user documents by the authenticated user
      // Enforce initial state for sensitive fields
      allow create: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.keys().hasAll(['email', 'coins', 'adsWatchedToday', 'lastAdWatchDate', 'referralCode', 'referredBy', 'isAdmin', 'spinWheelFreeSpinsToday', 'spinWheelAdSpinsToday', 'lastSpinWheelDate', 'deviceId', 'projectId'])
                    && request.resource.data.email is string && request.resource.data.email.matches(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/)
                    && request.resource.data.coins == 0 // New users start with 0 coins
                    && request.resource.data.adsWatchedToday == 0
                    && request.resource.data.lastAdWatchDate == '' // Or a default empty string/null
                    && request.resource.data.referralCode is string && request.resource.data.referralCode.size() > 0
                    && request.resource.data.isAdmin == false // New users are not admins
                    && request.resource.data.spinWheelFreeSpinsToday == 0 // Or initial free spins value
                    && request.resource.data.spinWheelAdSpinsToday == 0
                    && request.resource.data.lastSpinWheelDate == '' // Or a default empty string/null
                    && request.resource.data.deviceId is string && request.resource.data.deviceId.size() > 0
                    && request.resource.data.projectId is string && request.resource.data.projectId.size() > 0;

      // Allow updates to specific fields by the user, with strict validation
      allow update: if request.auth != null && request.auth.uid == userId
                    // Immutable fields must not change
                    && request.resource.data.email == resource.data.email
                    && request.resource.data.referralCode == resource.data.referralCode
                    && request.resource.data.referredBy == resource.data.referredBy
                    && request.resource.data.isAdmin == resource.data.isAdmin // Admin status cannot be changed by user
                    && request.resource.data.deviceId == resource.data.deviceId
                    && request.resource.data.projectId == resource.data.projectId
                    // Mutable fields with validation
                    && request.resource.data.coins is int && request.resource.data.coins >= 0
                    // Allow coins to be incremented/decremented by a small, reasonable amount per update
                    // This is a client-side compromise, still vulnerable to rapid clicks/bots
                    && request.resource.data.coins <= resource.data.coins + 100 // Example: max increment of 100 coins per update
                    && request.resource.data.coins >= resource.data.coins - 100 // Example: max decrement of 100 coins per update
                    // Ads Watched Today logic (client-side with rules)
                    && request.resource.data.adsWatchedToday is int && request.resource.data.adsWatchedToday >= 0
                    && request.resource.data.lastAdWatchDate is string && request.resource.data.lastAdWatchDate.matches(/^\d{4}-\d{2}-\d{2}$/)
                    // Spin Wheel logic (client-side with rules)
                    && request.resource.data.spinWheelFreeSpinsToday is int && request.resource.data.spinWheelFreeSpinsToday >= 0
                    && request.resource.data.spinWheelAdSpinsToday is int && request.resource.data.spinWheelAdSpinsToday >= 0
                    && request.resource.data.lastSpinWheelDate is string && request.resource.data.lastSpinWheelDate.matches(/^\d{4}-\d{2}-\d{2}$/);

      allow delete: if false; // No direct deletion of user accounts from client
    }

    // Withdrawal Requests Collection Rules
    match /withdrawalRequests/{requestId} {
      // Allow authenticated users to create withdrawal requests
      // Enforce initial status and positive amount
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid
                    && request.resource.data.amount is int && request.resource.data.amount > 0
                    && request.resource.data.status == 'pending'
                    && request.resource.data.projectId is string && request.resource.data.projectId.size() > 0;

      // Allow users to read their own withdrawal requests
      allow read: if request.auth != null && request.auth.uid == resource.data.uid;

      // Prevent any client-side updates to withdrawal requests after creation
      // Status and processing will be handled manually or by an external system
      allow update: if false;
      allow delete: if false;
    }

    // Default to denying all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
